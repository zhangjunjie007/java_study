1. 练习
	--	安装docker
		参考笔记文档，进行安装
	
	--	nginx镜像操作
		从DockerHub中拉取一个nginx镜像并查看
		使用docker save导出镜像到磁盘
		使用docker load加载镜像

	--	nginx容器操作
		创建运行一个Nginx容器
		进入Nginx容器，修改HTML文件内容，并查看效果
		
	--	去DockerHub搜索并拉取一个Redis镜像
		去DockerHub搜索Redis镜像
		查看Redis镜像的名称和版本
		利用docker pull命令拉取镜像
		利用docker save命令将 redis:latest打包为一个redis.tar包
		利用docker rmi 删除本地的redis:latest
		利用docker load 重新加载 redis.tar文件.

	--	创建并运行一个redis容器，并且支持数据持久化
		步骤一：到DockerHub搜索Redis镜像
		步骤二：查看Redis镜像文档中的帮助信息
		步骤三：利用docker run 命令运行一个Redis容器

	--	进入redis容器，并执行redis-cli客户端命令，存入num=666
		步骤一：进入redis容器
		步骤二：执行redis-cli客户端命令
		步骤三：设置数据num=666

	--	数据卷练习1: 运行nginx容器时使用 -v 参数挂载数据卷
		创建容器并挂载数据卷到容器内的HTML目录
		进入html数据卷所在位置，并修改HTML内容
		
	--	数据卷练习2: 运行一个MySQL容器
		在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像 ， 或者从网上(DockerHub)拉取mysql镜像 (mysql:5.7.25)
		创建目录/tmp/mysql/data
		创建目录/tmp/mysql/conf，将课前资料提供的hmy.cnf文件上传到/tmp/mysql/conf
		去DockerHub查阅资料，创建并运行MySQL容器，要求：
		挂载/tmp/mysql/data到mysql容器内数据存储目录
		挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件
		设置MySQL密码

	--	自定义镜像:基于Ubuntu镜像构建一个新镜像，运行一个java项目
		步骤1：新建一个空文件夹docker-demo
		步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录
		步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录
		步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录
		步骤5：进入docker-demo
		步骤6：运行命令：docker build -t javaweb:1.0 .
		步骤６：效果验证，访问 http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip

	--	利用DockerCompose部署微服务集群
		安装docker-compose（参考笔记文档）
		查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件
		修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名
		使用maven打包工具，将项目中的每个微服务都打包为app.jar
		将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中
		将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署
		参考命令：
		docker-compose up -d
		docker-compose restart gateway userservice orderservice

	--	使用私有镜像仓库
		使用DockerCompose部署带有图象界面的DockerRegistry(参考笔记文档)
		配置docker信任
		访问镜像库 (http://192.168.5.200:8080/ ,ip改为自己的虚拟机ip)
		推送镜像到私有仓库
			docker tag nginx:1.21.6 192.168.5.200:5000/nginx:1.0
			docker push 192.168.5.200:5000/nginx:1.0
		从私有仓库拉取镜像
			docker rmi 192.168.5.200:5000/nginx:1.0
			docker pull 192.168.5.200:5000/nginx:1.0

	
	
	